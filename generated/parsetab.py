
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADD_OPleftMUL_OPrightUMINUSADD_OP IDENTIFIER MUL_OP NUMBER PRINT WHILEprogramme : statement \';\' programmeprogramme : statementstatement : assignation\n        | expression\n        | structure statement : PRINT expressionstructure : WHILE expression \'{\' programme \'}\' assignation : IDENTIFIER "=" expression expression : IDENTIFIERexpression : NUMBERexpression : ADD_OP expression %prec UMINUSexpression : \'(\' expression \')\'expression : expression ADD_OP expression\n        | expression MUL_OP expression'
    
_lr_action_items = {'PRINT':([0,12,26,],[6,6,6,]),'IDENTIFIER':([0,6,9,10,11,12,13,14,17,26,],[7,16,16,16,16,7,16,16,16,7,]),'NUMBER':([0,6,9,10,11,12,13,14,17,26,],[8,8,8,8,8,8,8,8,8,8,]),'ADD_OP':([0,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,],[9,13,9,-9,-10,9,9,9,9,9,9,13,-9,9,-11,13,13,-13,-14,13,-12,9,]),'(':([0,6,9,10,11,12,13,14,17,26,],[10,10,10,10,10,10,10,10,10,10,]),'WHILE':([0,12,26,],[11,11,11,]),'$end':([1,2,3,4,5,7,8,15,16,18,21,22,23,24,25,28,],[0,-2,-3,-4,-5,-9,-10,-6,-9,-11,-1,-13,-14,-8,-12,-7,]),';':([2,3,4,5,7,8,15,16,18,22,23,24,25,28,],[12,-3,-4,-5,-9,-10,-6,-9,-11,-13,-14,-8,-12,-7,]),'}':([2,3,4,5,7,8,15,16,18,21,22,23,24,25,27,28,],[-2,-3,-4,-5,-9,-10,-6,-9,-11,-1,-13,-14,-8,-12,28,-7,]),'MUL_OP':([4,7,8,15,16,18,19,20,22,23,24,25,],[14,-9,-10,14,-9,-11,14,14,14,-14,14,-12,]),'=':([7,],[17,]),')':([8,16,18,19,22,23,25,],[-10,-9,-11,25,-13,-14,-12,]),'{':([8,16,18,20,22,23,25,],[-10,-9,-11,26,-13,-14,-12,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'programme':([0,12,26,],[1,21,27,]),'statement':([0,12,26,],[2,2,2,]),'assignation':([0,12,26,],[3,3,3,]),'expression':([0,6,9,10,11,12,13,14,17,26,],[4,15,18,19,20,4,22,23,24,4,]),'structure':([0,12,26,],[5,5,5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> programme","S'",1,None,None,None),
  ('programme -> statement ; programme','programme',3,'p_programme_expr','parser5.py',6),
  ('programme -> statement','programme',1,'p_programme_statement','parser5.py',10),
  ('statement -> assignation','statement',1,'p_statement','parser5.py',14),
  ('statement -> expression','statement',1,'p_statement','parser5.py',15),
  ('statement -> structure','statement',1,'p_statement','parser5.py',16),
  ('statement -> PRINT expression','statement',2,'p_statement_print','parser5.py',20),
  ('structure -> WHILE expression { programme }','structure',5,'p_structure','parser5.py',24),
  ('assignation -> IDENTIFIER = expression','assignation',3,'p_assign','parser5.py',28),
  ('expression -> IDENTIFIER','expression',1,'p_expression_var','parser5.py',32),
  ('expression -> NUMBER','expression',1,'p_expression','parser5.py',36),
  ('expression -> ADD_OP expression','expression',2,'p_minus','parser5.py',46),
  ('expression -> ( expression )','expression',3,'p_expression_paren','parser5.py',50),
  ('expression -> expression ADD_OP expression','expression',3,'p_expression_op','parser5.py',54),
  ('expression -> expression MUL_OP expression','expression',3,'p_expression_op','parser5.py',55),
]
